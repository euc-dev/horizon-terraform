name: Build Provider
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  
jobs:
  set_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set-version.outputs.new_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Dependencies
        run: |
          go mod tidy
          go mod download
        working-directory: ./src
        shell: bash
        
      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment Version
        id: increment_version
        run: |
          IFS='.' read -r -a version_parts <<< "$latest_tag"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create New Tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          new_version=${{ steps.set-version.outputs.new_version }}
          git config user.email "bsg@omnissa.com"
          git config user.name "guru1203-dev"
          git tag "v$new_version"
          git push https://x-access-token:${GH_TOKEN}@github.com/euc-dev/horizon-terraform.git "v$new_version"

  build:
    needs: set_version
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build Provider
        run: |
          version=${{ needs.set_version.outputs.new_version }}
          echo "Building provider for OS: ${{ matrix.os }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            GOOS=windows GOARCH=amd64 go build -o terraform-provider-horizonview-${version}.exe
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            GOOS=darwin GOARCH=amd64 go build -o terraform-provider-horizonview-${version}
          else
            GOOS=linux GOARCH=amd64 go build -o terraform-provider-horizonview-${version}
          fi
        shell: bash
        working-directory: ./src
  
      - name: Compress Build Artifacts
        if: runner.os == 'Linux'
        run: |
          version=${{ needs.set_version.outputs.new_version }}
          zip -j terraform-provider-horizonview-${version}-linux_amd64.zip src/terraform-provider-horizonview-${version}
        shell: bash
  
      - name: Compress Build Artifacts
        if: runner.os == 'macOS'
        run: |
          version=${{ needs.set_version.outputs.new_version }}
          zip -j terraform-provider-horizonview-${version}-darwin_amd64.zip src/terraform-provider-horizonview-${version}
        shell: bash
  
      - name: Compress Build Artifacts
        if: runner.os == 'Windows'
        run: |
          $version=${{ needs.set_version.outputs.new_version }}
          Compress-Archive -Path src\terraform-provider-horizonview-$version.exe -DestinationPath terraform-provider-horizonview-$version-windows_amd64.zip
        shell: pwsh
  
      - name: Upload Linux Build Artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-provider-horizonview-${{ needs.set_version.outputs.new_version }}-linux_amd64
          path: terraform-provider-horizonview-${{ needs.set_version.outputs.new_version }}-linux_amd64.zip
  
      - name: Upload macOS Build Artifacts
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-provider-horizonview-${{ needs.set_version.outputs.new_version }}-darwin_amd64
          path: terraform-provider-horizonview-${{ needs.set_version.outputs.new_version }}-darwin_amd64.zip
  
      - name: Upload Windows Build Artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-provider-horizonview-${{ needs.set_version.outputs.new_version }}-windows_amd64
          path: terraform-provider-horizonview-${{ needs.set_version.outputs.new_version }}-windows_amd64.zip
  
      - name: Test Code
        working-directory: ./src
        run: go test -o .terraform-provider-horizonview -json > TestResults-${{ matrix.os }}.json
        shell: bash
  
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Go-results-${{ matrix.os }}
          path: src/TestResults-${{ matrix.os }}.json
  
    
